// Snapshot for EF Core model at this point. Generated by Copilot for local migrations support. Verify locally with dotnet ef.
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Readify.Data;

namespace Readify.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class ReadifyModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:MaxIdentifierLength", 128);

            modelBuilder.Entity("Readify.Models.Category", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd();
                b.Property<string>("Name").IsRequired().HasMaxLength(256);
                b.Property<int?>("ParentId");
                b.HasKey("Id");
                b.ToTable("Categories");
            });

            modelBuilder.Entity("Readify.Models.Product", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd();
                b.Property<string>("Title").IsRequired().HasMaxLength(1000);
                b.Property<string>("Description").IsRequired();
                b.Property<string>("ISBN").IsRequired().HasMaxLength(100);
                b.Property<string>("Authors").IsRequired().HasMaxLength(1000);
                b.Property<string>("Publisher").IsRequired().HasMaxLength(500);
                b.Property<DateTime?>("ReleaseDate");
                b.Property<decimal>("Price").HasColumnType("decimal(18,2)");
                b.Property<int>("StockQty");
                b.Property<int>("CategoryId");
                b.Property<string>("ImageUrl").IsRequired().HasMaxLength(2000);
                b.Property<string>("Language").IsRequired().HasMaxLength(100);
                b.Property<string>("Format").IsRequired().HasMaxLength(100);
                b.Property<DateTime>("CreatedAt");
                b.Property<DateTime>("UpdatedAt");
                b.HasKey("Id");
                b.HasIndex("CategoryId");
                b.ToTable("Products");
            });

            modelBuilder.Entity("Readify.Models.RefreshToken", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd();
                b.Property<int>("UserId");
                b.Property<string>("Token").IsRequired().HasMaxLength(4000);
                b.Property<DateTime>("ExpiresAt");
                b.Property<bool>("Revoked");
                b.Property<DateTime>("CreatedAt");
                b.HasKey("Id");
                b.HasIndex("UserId");
                b.ToTable("RefreshTokens");
            });

            modelBuilder.Entity("Readify.Models.PasswordResetToken", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd();
                b.Property<int>("UserId");
                b.Property<string>("Token").IsRequired().HasMaxLength(4000);
                b.Property<DateTime>("ExpiresAt");
                b.Property<bool>("Used");
                b.HasKey("Id");
                b.HasIndex("UserId");
                b.ToTable("PasswordResetTokens");
            });

            modelBuilder.Entity("Readify.Models.User", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd();
                b.Property<string>("FullName").IsRequired();
                b.Property<string>("Email").IsRequired();
                b.Property<string>("PasswordHash").IsRequired();
                b.Property<string>("Role").IsRequired();
                b.Property<DateTime>("CreatedAt");
                b.HasKey("Id");
                b.ToTable("Users");
            });

            modelBuilder.Entity("Readify.Models.Product", b =>
            {
                b.HasOne("Readify.Models.Category", null)
                    .WithMany("Products")
                    .HasForeignKey("CategoryId")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("Readify.Models.RefreshToken", b =>
            {
                b.HasOne("Readify.Models.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("Readify.Models.PasswordResetToken", b =>
            {
                b.HasOne("Readify.Models.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade);
            });
        }
    }
}
